
- do spacing cleanup in master

- the 666 centers cleanup that I did was significant
    - use 444 to stage inner x-centers
    - pair UD oblique edges then stage UD centers via 555
    - LR and FB centers could be staged in a single phase (no need
      to pair oblique edges here)

All phases are limited by the speed of the IDA search.  Experiment with:
- 555 UD centers stage, get a baseline, how many nodes-per-sec can we do and how many nodes do we visit?
- for each prune table, build a graph where each node is a pt_state, each node will have 36 edges (one
  for each possible move) that takes you to another node. Each node will also store its cost to goal.
- IDA* until all pt nodes have a cost of 0.
- The downside here is there is no longer a "main" prune table...this may drastically increase the
  number of nodes we have to visit. Maybe we could build a "main" prune table where the key is the
  tuple of pt states?  At some point a node's edge may point to None though. This could be done as
  a 2.0 of this little experiment.

- we need to track the pt state tuples to know which nodes we have already visited

- The upsides to this approach are:
    - applying rotations to the cube, this should be a big CPU savings
    - looping over the cube state to build the pt states

- I swear I looked into this in the past...see if you can find those notes
    see email thread with joey.gouly@gmail.com it doesn't have the conclusion though


update
------
python IDA went from ~40k nodes-per-sec to 400k!! C IDA went from 1.4 million nps to 21.5 million nps
if I disable the "ida_explored" hash table lookup.  That means we explore more nodes though.  When
I enable ida_explored the rate drops to ~9 million nps. 

5x5x5 UD center staging can now be solved in about 300ms :)
5x5x5 UD center staging is 735471/735471^2 = 0.000 001

5x5x5 ALL center staging is 735471/(24!/(8!*8!*8!))^2 = 0.000 000 000 000 008
    but there would be 4 of the 735k prune tables so that would help some but
    probably not enough to make this feasible.


4x4x4 phase1+2 in a single phase? That would be 2.7 million edge states * 9 billion
but we cannot build the 9 billion entry pt, we could build two 735k prune tables
though and we can build the 2.7 million entry pt.  So this might be feasible.


with ida_explored
dwalton76@kids[rubiks-cube-NxNxN-solver]# time ./ida_search_via_graph --prune-table-0-filename lookup-table-4x4x4-step901-highlow-edges.bin --prune-table-0-state 2213330 --prune-table-1-filename lookup-table-4x4x4-step902-UD-centers.bin --prune-table-1-state 8133 --prune-table-2-filename lookup-table-4x4x4-step903-FB-centers.bin --prune-table-2-state 433014 --prune-table-3-filename lookup-table-4x4x4-step904-L-centers.bin --prune-table-3-state 10337 --prune-table-4-filename lookup-table-4x4x4-step905-R-centers.bin --prune-table-4-state 1309 --legal-moves "U,U',U2,Uw,Uw',Uw2,L,L',L2,Lw,Lw',Lw2,F,F',F2,Fw,Fw',Fw2,R,R',R2,Rw,Rw',Rw2,B,B',B2,Bw,Bw',Bw2,D,D',D2,Dw,Dw',Dw2"
[2019-08-14T11:57:32.308] min_ida_threshold 6
[2019-08-14T11:57:32.308] IDA threshold 6, explored 1 nodes, took 0.000s, 0 nodes-per-sec
[2019-08-14T11:57:32.308] IDA threshold 7, explored 29 nodes, took 0.000s, 0 nodes-per-sec
[2019-08-14T11:57:32.309] IDA threshold 8, explored 990 nodes, took 0.000s, 0 nodes-per-sec
[2019-08-14T11:57:32.312] IDA threshold 9, explored 25626 nodes, took 0.003s, 8542000 nodes-per-sec
[2019-08-14T11:57:32.404] IDA threshold 10, explored 639274 nodes, took 0.092s, 6948630 nodes-per-sec
[2019-08-14T11:57:34.777] IDA threshold 11, explored 15855799 nodes, took 2.372s, 6684569 nodes-per-sec
^C

this eventually ran my desktop out of memory and started swapping


without ida_explored
[2019-08-14T11:58:07.843] min_ida_threshold 6
[2019-08-14T11:58:07.843] IDA threshold 6, explored 1 nodes, took 0.000s, 0 nodes-per-sec
[2019-08-14T11:58:07.843] IDA threshold 7, explored 29 nodes, took 0.000s, 0 nodes-per-sec
[2019-08-14T11:58:07.844] IDA threshold 8, explored 1061 nodes, took 0.000s, 0 nodes-per-sec
[2019-08-14T11:58:07.847] IDA threshold 9, explored 33188 nodes, took 0.002s, 16594000 nodes-per-sec
[2019-08-14T11:58:07.935] IDA threshold 10, explored 1052249 nodes, took 0.087s, 12094816 nodes-per-sec
[2019-08-14T11:58:10.720] IDA threshold 11, explored 33230824 nodes, took 2.786s, 11927790 nodes-per-sec
[2019-08-14T11:59:43.730] IDA threshold 12, explored 1059442324 nodes, took 93.009s, 11390750 nodes-per-sec


optimal 333 (without L L' R R')
-------------------------------
Something to think about here is if the edges are EOed to their final orientation
then it might be feasible to solve 333 optimally since L L' R R' will not be required.
There would be 239,500,800 edge states and 88,179,840 million corner states.

    lookup-table-3x3x3-step00-ultimate.txt
    ======================================
    0 steps has 1 entries (0 percent, 0.00x previous step)
    1 steps has 14 entries (0 percent, 14.00x previous step)
    2 steps has 139 entries (0 percent, 9.93x previous step)
    3 steps has 1,368 entries (0 percent, 9.84x previous step)
    4 steps has 13,479 entries (0 percent, 9.85x previous step)
    5 steps has 131,404 entries (9 percent, 9.75x previous step)
    6 steps has 1,267,664 entries (89 percent, 9.65x previous step)
    extrapolate from here
    7 steps has 11,662,508 entries (9.20x previous step)
    8 steps has 102,630,070 entries (8.80x previous step)
    9 steps has 862,092,587 entries (8.40x previous step)
    10 steps has 6,896,740,695 entries (8.00x previous step)
    11 steps has 52,415,229,281 entries (7.60x previous step)
    12 steps has 377,389,650,823 entries (7.20x previous step)
    13 steps has 2,566,249,625,596 entries (6.80x previous step)
    14 steps has 16,423,997,603,814 entries (6.40x previous step)
    15 steps has 98,543,985,622,883 entries (6.00x previous step)
    16 steps has 551,846,319,488,144 entries (5.60x previous step)
    17 steps has 2,869,600,861,338,346 entries (5.20x previous step)
    18 steps has 13,774,084,134,424,048 entries (4.80x previous step)
    19 steps has 3,805,638,996,349,136 entries (0.28x previous step)

    Average: 17.974217274029616
    Total  : 21,119,142,223,872,000

weird 18 is the normal average for an optimal 333 solver that is surprising I
would have thought this would be lower. So whether or not to EO the edges to
their final orientation really depends on if you could get this 333 optimal
solver to run quickly enough.  There are far too many states for us to use 
the IDA-graph approach. Both of those prune tables would be pretty deep I
imagine so that would help.  Who knows this might be feasible.
