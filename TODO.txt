

- revisit ida_all_the_way...this should always be the case
    - where am I still using the python IDA code path anyway?
    This could probably use some cleanup.

- 444 centers stage move to IDA-via-graph?

- 444 edges move to IDA-via-graph?

- rm RubiksCube555ForNNN.py

- IDA speed
    I've noticed that the searches that use smaller PTs tend to run much much
    faster...I've seen as high as 80 million nodes-per-sec where some searches
    "only" do about 15 million nps.  I think it has to do with the smaller PT
    graphs being small enough to hold in the CPUs cache...or at least some
    significant chunk of them do.

    When we convert json to bin should we do so in a way so that nodes that are
    "near" each other in terms of moves are also near each other in the bin copy
    of the graph? This would basically be a matter of how we assign state_indexes.

    This is worth trying. Maybe it would be another significant speed jump that
    would open some more doors (like staging 555 centers in a single phase).

- IDA should be fast enough for tsai 555 now

    - the phase4 table has all 121,287,375 entries.  If we kept only up to depth-3 that would
      cut it to about 30 million and would be plenty deep. Or we start storing everything in
      an s3 bucket and stop worrying about large files. Honestly we could probably only keep
      up to depth-2 and that would be enough. Figure this out after the phase5 edges table
      has finished building.

    - pairing the last eight edges should be doable with IDA-via-graph.  Build a HighWingMidge
      table and a LowWingMidge table, I think each of those will be 8! or 40,320. The centers
      table should be 6 * 6 * 4900 = 176,400 states.

      There is some bug here I cannot figure out.  To troubleshoot it I am rebuilding the
      821 million entry "pair last eight edges" table.  Once that is done find the solution
      for the last 8 edges at the end of phase5 and feed that into IDA-via-graph and see
      what the two pt costs are. There is also something funky happening when I try to use
      the old way of solving, I see a ton of

        state_to_find QOqpPRYQryRP------------WWowXXZYxzZO, hash_raw 3819963987. hash_index 568559111, result is 0

      These should be pretty rare...maybe the hash algorithm has changed? This makes it pretty
      much impossible to use any HashCostOnly approach I think.

      delete without_LFRB and LookupTable555XPlaneYPlaneEdgesOrientPairOneEdge once you
      have this figured out.

- 666
    - stage inner x-centers via 444
    - pair LR obliques
    - stage LR centers via 555
    - stage UD and FB centers without pairing the obliques.  This should be
      12870^3, build all three of the 12870 tables. We currently spend ~6 moves
      pairing the UD oblique edges. Could we also "432" the LR centers in this phase?
      Couldn't hurt to try.

      ok long story short using three 12870 tables is too slow, the IDA takes
      about 30s. Am building a 12870^2 or 165,636,900 table of the oblique edges, that
      should speed it up a lot. It means we cannot use ida-via-graph though.

      This "should" be fast enough to 20736 the LR centers at the same time.
      Actually we don't care about the LR outer x-centers.  Of the LR inner x-centers
      and oblique edges there are 1728 states (out of 343,000) that are solveable without L L' R R'.
      This should be doable.

    - Today we use three phases to solve the centers (two phases to reduce the
      centers to 555 and then solve via 555). Solving the centers is overkill
      though, we only need to "daisy" the centers so we can use the 444 solver
      to pair the inside orbit of edges. Solving the centers here takes ~11 moves,
      doing the daisy thing will take ~5 moves.

        <option 1>
        - UD reduce to 555 (we have this today)
        - LR/FB reduce to 555 (we have this today)
        - daisy the t-centers (~5 moves)
        </option 1>

        <option 2>
        - UD reduce to 555 (we have this today)
        - LR and FB centers to solve inner x-centers and daisy pair the oblique edges
          while we are doing this also daisy pair the UD oblique edges.  The UD oblique
          edges will already be paired we just need to move them into the daisy pattern.
        </option 2>

        <option 3>
        - UD, LR and FB centers to solve inner x-centers and "daisy" pair the oblique edges.
          By daisy pair I mean that for sides L and R, we need all the obliques on side
          L to be either L or R but we cannot have a mix of the two. This is all we need
          to be able to use the 444 solver later to pair the inner orbit of edges. Once
          that is done the cube has been reduced to a 555.

          UD and FB will have 343,000 states each. LR will have 1728 states. This is probably
          not feasible.  The only hope being there are multiple 343,000 tables we can build.
            - 343000 for inner x-centers of all six sides
            - 343000 for inner x-centers and oblique edges of UD
            - 343000 for inner x-centers and oblique edges of FB
            - 1728 for inner x-centers and oblique edges of LR
            - 343000 for inner x-centers UD and oblique edges of FB
            - 343000 for inner x-centers FB and oblique edges of UD
        </option 3>


- 777 now that IDA is much faster does that change anything
    - once LR centers are staged, can we stage the FB centers 555
    while also pairing the oblique edges? Today we do these in two phases.  The FB
    centers prune table is 12870^2 or 165,636,900 so this is doable.

    ok I have been trying but this just doesn't look feasible.  Part of the problem
    is there is no good way to build an oblique edges prune table.

    <option 1>
    Brainstorming, say we just FB stage the 555 centers like we do today.  Could
    we stage the outer x-centers and oblique edges in one phase? (today we pair the
    oblique edges then move them and the outer x-centers in a 2nd phase). That
    would be 12870^4 state!! We could build multiple 12870^2 prune tables...I think
    there could be six of these, that is a lot of ram though. These would have to use
    the hashtable approach though so no IDA-via-graph here..
    </option 1>

    <option 2>
    If we paired the oblique edges while placing them on sides UD that would be 12870^3
    so is doable with a 12870^2 prune table.  That leaves the outer x-centers unstaged
    though but this isn't the end of the world because we only need to daisy the centers
    so we can use the 555 solver to pair the edges. Heck this might save some moves because
    the 555 solver doesn't expect the centers to be staged.
    </option 2>


   - we shouldn't need to solve all of the centers, should be able to do the 
     "daisy" thing. That is a big change though, wait to make sure it works on 666.

- IDAViaGraph cleanup
    - drop linecount, filesize and the main table from __init__
