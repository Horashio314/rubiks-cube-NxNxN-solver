
- 444 centers stage move to IDA-via-graph?

- 444 edges move to IDA-via-graph?

- rm RubiksCube555ForNNN.py

- IDA speed
    I've noticed that the searches that use smaller PTs tend to run much much
    faster...I've seen as high as 80 million nodes-per-sec where some searches
    "only" do about 15 million nps.  I think it has to do with the smaller PT
    graphs being small enough to hold in the CPUs cache...or at least some
    significant chunk of them do.

    When we convert json to bin should we do so in a way so that nodes that are
    "near" each other in terms of moves are also near each other in the bin copy
    of the graph? This would basically be a matter of how we assign state_indexes.

    This is worth trying. Maybe it would be another significant speed jump that
    would open some more doors (like staging 555 centers in a single phase).

- IDA should be fast enough for tsai 555 now

    - the phase4 table has all 121,287,375 entries.  If we kept only up to depth-3 that would
      cut it to about 30 million and would be plenty deep. Or we start storing everything in
      an s3 bucket and stop worrying about large files. Honestly we could probably only keep
      up to depth-2 and that would be enough. Figure this out after the phase5 edges table
      has finished building.

    - pairing the last eight edges should be doable with IDA-via-graph.  Build a HighWingMidge
      table and a LowWingMidge table, I think each of those will be 8! or 40,320. The centers
      table should be 6 * 6 * 4900 = 176,400 states.

      There is some bug here I cannot figure out.  To troubleshoot it I am rebuilding the
      821 million entry "pair last eight edges" table.  Once that is done find the solution
      for the last 8 edges at the end of phase5 and feed that into IDA-via-graph and see
      what the two pt costs are. There is also something funky happening when I try to use
      the old way of solving, I see a ton of

        state_to_find QOqpPRYQryRP------------WWowXXZYxzZO, hash_raw 3819963987. hash_index 568559111, result is 0

      These should be pretty rare...maybe the hash algorithm has changed? This makes it pretty
      much impossible to use any HashCostOnly approach I think.

      delete without_LFRB and LookupTable555XPlaneYPlaneEdgesOrientPairOneEdge once you
      have this figured out.

    - Move 555 centers solving to IDA-via-C?

- 666
    - stage inner x-centers via 444
    - pair LR obliques
        - could we skip this phase? This takes ~9 moves. This would be 735741^3 states
        but we can build all three of those tables. My guess is this would be too slow
        but it couldn't hurt to try.
    - stage LR centers via 555
    - stage UD and FB centers without pairing the obliques.  This should be
      12870^3, build all three of the 12870 tables. We currently spend ~6 moves
      pairing the UD oblique edges. Could we also "432" the LR centers in this phase?
      Couldn't hurt to try.

    - Today we use two phases to reduce the centers to 555 and then solve via 555.
      Could we instead do
        - LR and FB centers to vertical bars
            Each of these is 70^4 or 24,010,000 so this may not be doable unless we built
            the graph for that entire table...that would be huge though. We could build
            multiple 70^3 or 343,000 tables though.
        - solve all centers. Not sure how many vertical bars patterns there are...555 has 6 of them
          so rough guess at 36 just to overestimate. This phase would be very doable. Heck maybe
          try to figure out how to EO the inner orbit of edges for 444 too?

- 777 now that IDA is much faster does that change anything?
    - see how 666 refactors goes first

- IDAViaGraph cleanup
    - drop linecount, filesize and the main table from __init__
