
today
=====
- tommyhash this should help with speed and memory. Test against the following.
    It takes 25s and 589M of memory today. It also takes 800ms to load the step30 table.
    http://www.tommyds.it/doc/tommyhashtbl_8h
    https://github.com/amadvance/tommyds/

    time ./ida_search --kociemba .RFLL.F....BB....BD....RF....F.BLUR..UDUR.L.LL.LFLxLxUULLxLBL.Lx.L.BDBD..LBRF.B.xx.UDxLLxRFLLLLLB.xL.D.BURB..RLUU.D....DR....LR....RF....R.RBBB..DDFR.D.Lx.UFxLLxRFLxxLDL.xL.L.UBFF..FDUU.F.Lx.RFxxxxLLxxxLLD.Lx.U.DDUU. --type 6x6x6-LR-inner-x-centers-oblique-edges-stage --orbit1-need-even-w


tomorrow
========
- 777 step30 to IDAViaC
This one takes 21 minutes!! :(
BFBDFLFRDUDUURLUUDUUFFDDUDDUFDUDDUDRUDUDDFRBRFDRBUUFLRDLBFLFBBLRLLLRBUFBRRRRDRBRRLRUBRLFRLLRRBDBBDFUUUFULFFLBRRDRBFBFRBBRBFFFRFFBBBBBFLLLRBRLBDLRBBURLFDDUUUUUDDDLDDUDDDBUUDUDLRUDUUUDLUDUDDLDRURULLDUUDUFUBLBLRLDLRRLLRDBFLLRBLLFLLRLLFBBLBRURDFRDBFDULRUDRUFLRFFLFFBFBFBBLBBFBULLFFFFBDRFRFBLBFBURFF

    2018-08-20 10:05:02,516     RubiksCube777.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: recolor (custom)
    2018-08-20 10:05:02,517       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold range 5->99
    2018-08-20 10:05:02,517       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 5, explored 1 nodes in 0ms, 20408 nodes-per-sec
    2018-08-20 10:05:02,526       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 6, explored 46 nodes in 8ms, 5301 nodes-per-sec
    2018-08-20 10:05:02,552       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 7, explored 187 nodes in 26ms, 7040 nodes-per-sec
    2018-08-20 10:05:02,716       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 8, explored 3124 nodes in 163ms, 19092 nodes-per-sec
    2018-08-20 10:05:04,407       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 9, explored 46768 nodes in 1690ms, 27665 nodes-per-sec
    2018-08-20 10:05:37,588       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 10, explored 925409 nodes in 0:00:33.181277, 27889 nodes-per-sec
    2018-08-20 10:18:26,484       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 11, explored 16708710 nodes in 0:12:48.895819, 21730 nodes-per-sec
    2018-08-20 10:24:56,646       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: exit_asap on first match
    2018-08-20 10:26:38,831       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: found 1/455720 states in lookup-table
    2018-08-20 10:26:38,832       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: 1/1 solution_len 13 (NEW MIN)
    2018-08-20 10:26:38,840       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA threshold 12, explored 11093542 nodes in 0:08:12.355975 (0:21:36.323674 total)
    2018-08-20 10:26:38,840       LookupTable.py     INFO: 7x7x7-step30-stage-lr-oblique-edges: IDA explored 28777787 nodes in 0:21:36.323674, 22199 nodes-per-sec

    For some reason I never built the step33 table?? See if that helps
    This is building now on kids machine

- 777 step40 to IDAViaC
- 777 step50 to IDAViaC
- 777 step60 to IDAViaC

- 444 step10 but it needs to avoid OLL. Would be cool if it searched until
  it found a solution that satisfied phase2.

- delete all exit_asap code

- delete all heuristic_stats code

- 555 step20 moves this to C...this is low priority though

- 666 step60? Not sure if this one is ever slow

- cube state via bitfield
    - gprof first to find out if the rotate() is the bottleneck
    - 555 step10 is "slow" (~4s) for this one...test with it
        - FLDDRDRFDRBUUURDLRBFBULLLUUFBFUURUULURBDRFBBFULFBLDBBBFLRDFFDLFBUURUUFLDUFRBFRRBUDDLBFBDRUDDFFRDRBRBUBUBRLFFLUDLLDFDBLRBFFLRUDLLURRLRUFRDBFBLBLDLDDRDL

- make these consistent
    edge vs edges
    center vs centers
    step vs move
    group vs stage
    class names
    method names


555 edges tables to build
=========================

555 edges (first 12)
--------------------
- build a table where we track all 12 edges up to 7-deep, maybe 8-deep, 9-deep would be huge
- the odds of us getting a hit in this table are very low...this probably isn't worth it


555 edges (first 8)
-------------------
- track 8 edges
- build this to 8-deep, maybe 9-deep


555 edges (first 4)
-------------------
- track 4 edges
- build this to 9-deep, possibly 10-deep


555 edges (first 2)
-------------------
- track 2 edges
- not sure if we will need this so hold off

*********************
*********************

555 edges (second 8)
--------------------
- build a table where we track 8 edges, do not break up the LB, LF, RF, RB edges.


555 edges (second 4)
--------------------
- build a table where we track 4 edges, do not break up the LB, LF, RF, RB edges.
- we should be able to build this 1 or 2 moves deeper than the "first 4" table
  so build that one first before deciding how deep to go on this one.

555 edges (second 2)
--------------------
- build a table where we track 4 edges, do not break up the LB, LF, RF, RB edges.
- not sure if we will need this so hold off


*********************
*********************


555 edges (third 4)
-------------------
- This is the L4E table so this is done






555 edges (4, 4, 4)
===================
- pair the first four edges...maybe. There are 7920 starting points where 4-edges are paired.
  We will build this table out as deep as we can, 11-deep is probably the best to hope for.

  Try all 12!/(4!*8!) or 495 combinations of 4-edges and see if any of them produce a hit. If not...
    - for each of the 495 try all 289 outer layer 2-move sequences and see if any of those
      put the cube in a state that has a hit. 289 * 495 is 143,055 if not ...

    - for each of the 495 try all 4338 outer layer 3-move sequences and see if any of those
      put the cube in a state that has a hit. 4338 * 495 is 2,147,310 if not ...

    - pair the first two edges, 12!/(2!*10!) or 66 starting points., I know the math is overestimating but (24*22)^3 is 147,197,952
    - move the two paired edges to the x-plane on side F
    - pair the second two edges, again math is wrong but (18 * 16)^3 is 23,887,872

- place the four paired edges in the x-plane

- pair the second four edges without disturbing the four paired edges
    Try all 8!/(4!*4!) or 70 combinations of 4-edges and see if any of them produce a hit.

- place the second four paired edges in a plane

- use the L4E table to pair the remaining edges
