
IDA via C
=========
- 444 step10 but it needs to avoid OLL. Would be cool if it searched until
  it found a solution that satisfied phase2.

- 555 step20 use the 165 million entry table but store it via perfect hash. We can then pick
  the step10 solution that leads to the shortest step20. We would need C IDA in step10 to
  write a bunch of solutions to a file.

- 555 step30 is slow for this one
    RFFFUDUDURBFULULFDBLRLDUFDBLUBBBDDURLRDRFRUDDBFUFLFURRLDFRRRUBFUUDUFLLBLBBULDDRRUFUUUBUDFFDRFLRBBLRFDLLUUBBRFRFRLLBFRLBRRFRBDLLDDFBLRDLFBBBLBLBDUUFDDD
    - could bring back the UF table
    - could move it to C with the future option of staging a L4E as part of the search

- 666 step30 needs to use the step31 table to speed things up...I think that table
  is 165 million entries though so maybe not worth it. The other option here is to
  load in the 2-deep table.

- 666 step20 and step30 are in C but need to avoid OLL
- 666 step60? Not sure if this one is ever slow

- 777 redo UD oblique edge pairing in C
- 777 step40
- 777 step50
- 777 step60

- delete all exit_asap code
- delete all heuristic_stats code
- delete all collect_stats code


666 URFLLFFDUDUBBUUUUBDDUDURFUUDUFBBLURLDUDURLLFLRFLFRFLBUULLBRBLFLFLLDBDBDFRLBRFBBBFFRUDBRRFRFRLLRLBBFRRDLBURBRURLUUFDDUDUDRDDDDLRUUDURFDDDDRBRBBBRLDDFRUDRRFBUFBRRBRFLBFLDLLFRLLRUBFFFDFDUUBFLLBFRFBFBBLLFBFLLDBLBRUUDDUUD
- step30 takes 17 minutes!!
- THIS ONE IS BARFING


misc
===================
- UFFDRUDBURBFUUBLFFFLUBRDRDULDUDRLUDUDRRBBLBRBLFUDRBLDRFRFDBFURFDLFLURUFRDRUDBBBBFBLBRLFDFFUUBFLBFFBDFRRURLULLULDLURBDRDRDBFLLFLRULFRRLFULBBDDDUBLBDDUL
- DLDLLRDBLBRDUUBRUUBDURFLBLBUUDLLRRLUFRFFFRLDBLBRDRRFLDDRDDUBULFFFRLLBLDFLUFFUDBUUUBFLRUDFBURRRBBRDDBRDDDFFDDFBBULBLFFDLULLUFRFDBFBUFRBRRBBLLRURBDUFFUU
 fail due to 555 edges table not being deep enough

- 777step10 takes 31s on this one!!
UURDDFBLDBBDRRUDDRUBDURLUFFFBFBRDLBDUBLFBBDRUUUDDFUDLFUUBDRBULUDRFRRUFURLRFRBURLLBFFFBRRLDDLBBUDLFRBBFLRRFLUFBLLFURDDBRDFBFDDRFBUURURLFLDDDRLULLBBUFBDDLLBUFLDRLRBLFUFRRBBUDBULLFBDLLRBRBULUDBDDRFLURDLBRBBLUFUBFDFDLUUUUBBDLBLRFUUBRDUUFFLLBFDDBRUFDRRBFUFFRBDDURFRFLRDDRDULBFFLLDBFFRDFRFLRULLULFLRL

- 777step30 takes 64s on this one!!
BFBDFLFRDUDUURLUUDUUFFDDUDDUFDUDDUDRUDUDDFRBRFDRBUUFLRDLBFLFBBLRLLLRBUFBRRRRDRBRRLRUBRLFRLLRRBDBBDFUUUFULFFLBRRDRBFBFRBBRBFFFRFFBBBBBFLLLRBRLBDLRBBURLFDDUUUUUDDDLDDUDDDBUUDUDLRUDUUUDLUDUDDLDRURULLDUUDUFUBLBLRLDLRRLLRDBFLLRBLLFLLRLLFBBLBRURDFRDBFDULRUDRUFLRFFLFFBFBFBBLBBFBULLFFFFBDRFRFBLBFBURFF

- make these consistent
    edge vs edges
    center vs centers
    step vs move
    group vs stage
    class names
    method names

- move all table building code from old way to new way...this is going to take a while
  it may not be worth it.  Low priority at the very least.
    - all that is left are the 777 UD oblique edges

555 edges
=========
- pair the first four edges...maybe. There are 7920 starting points where 4-edges are paired.
  We will build this table out as deep as we can, 11-deep is probably the best to hope for.

  Try all 12!/(4!*8!) or 495 combinations of 4-edges and see if any of them produce a hit. If not...
    - for each of the 495 try all 289 outer layer 2-move sequences and see if any of those
      put the cube in a state that has a hit. 289 * 495 is 143,055 if not ...

    - for each of the 495 try all 4338 outer layer 3-move sequences and see if any of those
      put the cube in a state that has a hit. 4338 * 495 is 2,147,310 if not ...

    - pair the first two edges, 12!/(2!*10!) or 66 starting points., I know the math is overestimating but (24*22)^3 is 147,197,952
    - move the two paired edges to the x-plane on side F
    - pair the second two edges, again math is wrong but (18 * 16)^3 is 23,887,872

- place the four paired edges in the x-plane

- pair the second four edges without disturbing the four paired edges
    Try all 8!/(4!*4!) or 70 combinations of 4-edges and see if any of them produce a hit.

- place the second four paired edges in a plane

- use the L4E table to pair the remaining edges
